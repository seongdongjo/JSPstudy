자바설치 및 제거
cmd -> java -version -> appwiz.cpl(프로그램제거) -> java 2개 제거(update, kit)

자바 설치
구글 -> jdk8 -> win64 다운 -> 설치 -> C위치에 다운 ->  jdk 먼저 다운 받고 -> jre를 다운받는다(자바코드실행하기위한)
->cmd -> java -version

환경변수 세팅
cmd -> sysdm.cpl -> 위에 고급 -> 환경변수 -> 시스템변수(전체계정이 설정되는)에서
1. JAVA_HOME
-> C->programfiles -> java -> jdk 폴더 들어가기 -> 파일탐색기 주소 복사
편집 -> %JAVA_HOME%bin 삭제 -> 새로 만들기 -> 변수이름 : JAVA_HOME , 변수값 : C:\Program Files\Java\jdk1.8.0_291
-> 확인
2. Path
시스템변수 -> Path 편집 -> %JAVA_HOME%\bin

cmd -> javac -version으로 확인

파일탐색기 주소창에 -> %JAVA_HOME%하면 설치경로로 이동된다.
------------------------------------------------------------
이클립스 설치
구글 -> eclipse -> downloadpackages -> MORE DOWNLOADS 9월부터 자바8버전이 인식xx 그래서 3월로 다운받는다
-> EE설치 

톰캣설치 -> 8버전(core.zip) -> 압축풀기 -> bin은 톰캣에 관련된 명령어 들어가있다. -> 
start.bat 더블클릭 실행 -> 서버가 돌아간다 -> localhost:8080치면 톰캣이 돌아가고 있기때문에 가능하다. 윈도우는 startup.bat이고
리눅스는 start.sh라서 실제로 systemctl start tomcat과 같다고 생각하면 된다.

시스템변수
1.Path하나더 추가 -> CATALIA_HOME ->  E:\평일7월JSP_조성동\apache-tomcat-8.5.68 (bin에는 들어가지말고)
2.Path 편집 -> 추가 %CATALINA_HOME%\bin

cmd새로 열어서 -> %CATALINA_HOME% 입력 -> 톰캣홈디렉토리 나온다. -> startup치면 서버구동된다. -> localhost:8080 검색
------------------------------------------------------------------
jsp하기위한 준비
eclipse ee
- General - Workspace - encoding
- web - html/css/jsp - encoding
- web - browser - chrome

apache tomcat 8.5.xx(core로 받기)
- java환경변수가 잡혀있어야 한다.(톰캣이 해당변수를 쓰기때문에)
- apachetomcat환경변수도 잡혀있어야한다
사용자변수 -> CATALINA_HOME -> C:\실습jsp\apache-tomcat-8.5.68
환경변수 -> Path -> %CATALINA_HOME%\bin

톰캣테스트방법
cmd -> catalina start -> localhost:8080
taskkill /f /im javaw.exe 또는 taskkill /f /im java.exe 로 톰캣종료가능

eclipse에서 Preferences  -> Server - RuntimeEnvir -> add 8.5 -> browse bin전까지
(E:\평일7월JSP_조성동\apache-tomcat-8.5.68)
jre선택은 알아서 APPLY하면 이제 저 Tomcat서버가 jsp를 실행해준다.

누가 어디서나 언제 접근하더라도, 항상 같은 형식의 응답을 반환하는 서버 -> static web server

조건에 따라, 프로그래밍 언어의 개입(java)으로, 상황에 따라 다른 문서의 내용을 제공하는 서버 -> Dynamic Web server
-> tomcat 
 
기본적으로 웹문서는 WebContent폴더(우클릭)에서 만든다.
----------------------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.Date, java.text.SimpleDateFormat" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%
	Date date = new Date();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 hh시 mm분 ss초");
	String today = sdf.format(date);
%>
<h1>지금은 <%=today %>입니다</h1>
<hr>

<ol>
	<li>자바 코드가 HTML/CSS/Javascript보다 먼저 실행된다</li>
	<li>자바 코드는 톰캣(서버)에 의해서 해석되고 실행된다</li>
	<li>클라이언트는 최종적으로 만들어진 HTML문서를 받는다, 그래서 웹페이지소스보기 하면 java코드는 안나온다</li>
</ol>
<!-- 톰캣이 요청을 받아서 jsp문서가있는지 확인하고 java파일로 만들고 그거를 class파일로 만들어서 -->
<!-- 클라이언트에게 넘길때는 html+jsp 결합한 형태로 보여지게된다. -->
<img src="http://221.164.9.222/img/jsp_cycle.jpg" width="800px">
</body>
</html>
===================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex01.jsp - JSP의 기본문법</title>
<style>
	tbody > tr > th:nth-child(1) {
		font-weight: bold;
		color: orange;
	}
	tbody > tr:nth-child(5) > td:nth-child(1) {
		color: rgb(128,128,255);
	}
</style>
</head>
<body>
	<table border="1" cellpadding="7" cellspacing="0">
		<thead>
			<tr>
				<th>문법</th>
				<th>이름</th>
				<th>내용</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<th>&lt;%@ %</th>
				<th>지시자(directive)</th>
				<th>3가지종류: 페이지 전반에 적용되는 설정, 다른 JSP파일 포함, 다른 라이브러리 불러오기</th>
			</tr>
			<tr>
				<th>&lt;%! %></th>
				<th>선언부(declaration)</th>
				<th>필드를 선언하거나, 메서드를 정의하는 영역</th>
			</tr>
			<tr>
				<th>&lt;% %></th>
				<th>스크립틀릿(scriptlet)</th>
				<th>메인에 해당하는 자바코드를 작성하는 함수영역, sevice()</th>
			</tr>
			<tr>
				<th>&lt;%= %></th>
				<th>표현식(expression)</th>
				<th>스크립틀릿의 out.print()를 이용해 HTML문서에 자바 값을 출력하는 구문</th>
			</tr>
			<tr>
				<th>&lt;%-- %></th>
				<th>JSP 주석</th>
				<th>HTML의 주석과 같은 용도, 브라우저에서 확인 할 수 없다</th>
			</tr>
		</tbody>
	</table>
	<!--  HTML 주석, 브라우저에서 확인가능 -->
	<%-- JSP 주석, 브라우저에서 확인 불가 --%>
</body>
</html>
=============================================================
<%@ page import="java.util.Random"%>
<%@ page import="java.util.Arrays"%>
<%@ page import="java.util.ArrayList"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%!	// declaration, 선언부, JSP가 클래스로 변환될때 멤버 필드와 멤버 메서드를 선언 및 정의하는 부분

	private String[] arr = {"김주현", "신은욱", "김재령", "홍서현"};
	private ArrayList<String> al = new ArrayList<String>(Arrays.asList(arr));
	
	// 멤버필드이므로, 접근 제한자 적용 가능
	
	public String getRandomName() {
		Random ran = new Random();
		int index = ran.nextInt(al.size());
		return al.get(index);
	}
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex02 - jsp 기본문법 활용</title>
</head>
<body>

<h1>JSP 기본 문법 활용</h1>
<hr>
<%
	// scriptlet, 메인함수에 코드를 작성한다는 느낌으로 사용
	String name = getRandomName();
	
	System.out.println("문서에 반영할 이름 : " + name);	// 콘솔창에 출력
	out.println(name + "님 당첨 !!");
%>
<h2>당첨자 : <%=name %></h2>

</body>
</html>
============================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex03 - JSP 내장 객체</title>
</head>
<body>
	<h1>JSP 내장 객체</h1>
	<hr>
	<table border="1" cellpadding="7" cellspacing="0">
	<thead>
		<tr>
			<th>분류</th>
			<th>내장객체</th>
		</tr>
		<h3>내장객체: 생성자를 통해서 생성하지않아도, JSP페이지가 기본적으로 참조할 수 있는 객체</h3>
	</thead>
	<tbody>
		<tr>
			<td>입출력 관련 객체</td>
			<td>
				<p>request</p>
				<p>response</p>
				<p>out</p>
			</td>
		</tr>
		<tr>
			<td>서블릿 관련 객체</td>
			<td>
				<p>page</p>
				<p>config</p>
			</td>
		</tr>
		<tr>
			<td>외부환경 정보를 제공하는 객체</td>
			<td>
				<p>session(로그아웃, 페이지끄기전까지 정보유지)</p>
				<p>application(서버가 종료되기전까지 정보유지)</p>
				<p>pageContext</p>
			</td>
		</tr>
		<tr>
			<td>예외 관련 객체</td>
			<td>exception</td>
		</tr>
	</tbody>
	</table>
</body>
</html>
=================================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex04 - request</title>
</head>
<body>

	<h1>request 내장 객체</h1>
	<hr>
	
	<%
		String name = request.getParameter("name");	// 파라미터의 이름을 문자열로 전달하면, 값을 문자열로 반환
		// value = map.get(key)
		
		// request : 클라이언트가 웹 서버에게 전달하는 요청을 객체화 한 형태
		
		// 보내는 사람	: 클라이언트(IP)
		// 받는 사람	: 서버(IP)
		// 요청 형식	: 내가 문서를 받고싶다면 GET, 내가 어떤 내용을 담아서 보낸다면 POST
		// 요청 내용	: 받고싶은 문서의 이름이나, 클라이언트가 보내는 내용을 받기 원하는 서버의 페이지 이름 (자원의 위치)
		// URL		: Uniform Resource Locator (웹 브라우저의 주소창을 통해서 전달)
	%>
		<h4>보내는 사람 : <%=request.getRemoteAddr() %></h4>
		<h4>받는 사람 : <%=request.getLocalAddr() %></h4>
		<h4>요청 형식 : <%=request.getMethod() %></h4>
		<h4>요청 내용 : <%=request.getRequestURL() %></h4>
		<h4>자원 식별자 (서버 내에서 자원을 식별할 수 있는 유일한 이름) : <%=request.getRequestURI() %></h4>
	<%
		// http://search.naver.com/search.naver?query=이지은
		
		// http://				프로토콜, 서버와 클라이언트가 통신하는 규칙과 약속
		// search.naver.com		서버 도메인(IP), 어떤 서버에게 요청을 전달하는가 (받는 사람)
		// search.naver			문서, 페이지의 이름 (자원의 이름)
		// ?query=이지은			파라미터, ?변수이름1=변수값1&변수이름2=변수값...
		//						클라이언트가 서버에게 전달하고자 하는 값 (내가 원하는 문서를 특정하기 위해서)
		
		// http://도서관.com/대여.html?책이름=드래곤볼&책번호=3
		// 도서관에 가서 대여 창구에서 "책 이름은 드래곤볼이구요, 번호는 3권입니다. 이 책을 저에게 주세요(GET)"
		
		// request의 방향은 항상 클라이언트 -> 서버
	%>
	
	<h3>name : <%=name %></h3>

</body>
</html>
==============================================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex05 - 파라미터 활용 예시</title>
</head>
<body>

	<h1>파라미터 활용 예시</h1>
	<hr>
	
	<%--일반적인 웹 환경에서, 사용자가 주소창에 직접 파라미터를 작성하는 경우는 거의 없다 --%>
	<%--현재 페이지에서는 입력만 받고, 입력받은 파라미터를 다른 페이지에 전달해서 처리하도록 설정 --%>
	
	<form action="ex05-result.jsp">
		<input type="number" name="num" placeholder="번호" min="1" max="5" autofocus>
		<input type="submit">
	</form>
	
</body>
</html>
----------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.ArrayList, java.util.Arrays, java.util.Collections"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex05-result</title>
</head>
<body>

	<h1>전달받은 파라미터를 활용하여 출력 내용을 결정</h1>
	<hr>
	<%
		String num = request.getParameter("num");
		int idx = 0;
		if(num != null) {	// 파라미터를 입력하지 않았을 수도 있다
			idx = Integer.parseInt(num);	
		}
		
		String[] arr = {"짱구", "훈이", "유리", "철수", "맹구"};
		ArrayList<String> list = new ArrayList<String>(Arrays.asList(arr));
		Collections.sort(list);
		
		String value = (idx > 0) ? list.get(idx - 1) : "...";
	%>
	
	<h2><%=idx %>번째 멤버의 이름은 <%=value %>입니다</h2>
	<a href="ex05.jsp">입력페이지로 돌아가기</a>

</body>
</html>
===========================================================================================