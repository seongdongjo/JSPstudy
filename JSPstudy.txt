자바설치 및 제거
cmd -> java -version -> appwiz.cpl(프로그램제거) -> java 2개 제거(update, kit)

자바 설치
구글 -> jdk8 -> win64 다운 -> 설치 -> C위치에 다운 ->  jdk 먼저 다운 받고 -> jre를 다운받는다(자바코드실행하기위한)
->cmd -> java -version

환경변수 세팅
cmd -> sysdm.cpl -> 위에 고급 -> 환경변수 -> 시스템변수(전체계정이 설정되는)에서
1. JAVA_HOME
-> C->programfiles -> java -> jdk 폴더 들어가기 -> 파일탐색기 주소 복사
편집 -> %JAVA_HOME%bin 삭제 -> 새로 만들기 -> 변수이름 : JAVA_HOME , 변수값 : C:\Program Files\Java\jdk1.8.0_291
-> 확인
2. Path
시스템변수 -> Path 편집 -> %JAVA_HOME%\bin

cmd -> javac -version으로 확인

파일탐색기 주소창에 -> %JAVA_HOME%하면 설치경로로 이동된다.
------------------------------------------------------------
이클립스 설치
구글 -> eclipse -> downloadpackages -> MORE DOWNLOADS 9월부터 자바8버전이 인식xx 그래서 3월로 다운받는다
-> EE설치 

톰캣설치 -> 8버전(core.zip) -> 압축풀기 -> bin은 톰캣에 관련된 명령어 들어가있다. -> 
start.bat 더블클릭 실행 -> 서버가 돌아간다 -> localhost:8080치면 톰캣이 돌아가고 있기때문에 가능하다. 윈도우는 startup.bat이고
리눅스는 start.sh라서 실제로 systemctl start tomcat과 같다고 생각하면 된다.

시스템변수
1.Path하나더 추가 -> CATALIA_HOME ->  E:\평일7월JSP_조성동\apache-tomcat-8.5.68 (bin에는 들어가지말고)
2.Path 편집 -> 추가 %CATALINA_HOME%\bin

cmd새로 열어서 -> %CATALINA_HOME% 입력 -> 톰캣홈디렉토리 나온다. -> startup치면 서버구동된다. -> localhost:8080 검색
------------------------------------------------------------------
jsp하기위한 준비
eclipse ee
- General - Workspace - encoding
- web - html/css/jsp - encoding
- web - browser - chrome

apache tomcat 8.5.xx(core로 받기)
- java환경변수가 잡혀있어야 한다.(톰캣이 해당변수를 쓰기때문에)
- apachetomcat환경변수도 잡혀있어야한다
사용자변수 -> CATALINA_HOME -> C:\실습jsp\apache-tomcat-8.5.68
환경변수 -> Path -> %CATALINA_HOME%\bin

톰캣테스트방법
cmd -> catalina start -> localhost:8080
taskkill /f /im javaw.exe 또는 taskkill /f /im java.exe 로 톰캣종료가능

eclipse에서 Preferences  -> Server - RuntimeEnvir -> add 8.5 -> browse bin전까지
(E:\평일7월JSP_조성동\apache-tomcat-8.5.68)
jre선택은 알아서 APPLY하면 이제 저 Tomcat서버가 jsp를 실행해준다.

누가 어디서나 언제 접근하더라도, 항상 같은 형식의 응답을 반환하는 서버 -> static web server

조건에 따라, 프로그래밍 언어의 개입(java)으로, 상황에 따라 다른 문서의 내용을 제공하는 서버 -> Dynamic Web server
-> tomcat 
 
기본적으로 웹문서는 WebContent폴더(우클릭)에서 만든다.
----------------------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.Date, java.text.SimpleDateFormat" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%
	Date date = new Date();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 hh시 mm분 ss초");
	String today = sdf.format(date);
%>
<h1>지금은 <%=today %>입니다</h1>
<hr>

<ol>
	<li>자바 코드가 HTML/CSS/Javascript보다 먼저 실행된다</li>
	<li>자바 코드는 톰캣(서버)에 의해서 해석되고 실행된다</li>
	<li>클라이언트는 최종적으로 만들어진 HTML문서를 받는다, 그래서 웹페이지소스보기 하면 java코드는 안나온다</li>
</ol>
<!-- 톰캣이 요청을 받아서 jsp문서가있는지 확인하고 java파일로 만들고 그거를 class파일로 만들어서 -->
<!-- 클라이언트에게 넘길때는 html+jsp 결합한 형태로 보여지게된다. -->
<img src="http://221.164.9.222/img/jsp_cycle.jpg" width="800px">
</body>
</html>
===================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex01.jsp - JSP의 기본문법</title>
<style>
	tbody > tr > th:nth-child(1) {
		font-weight: bold;
		color: orange;
	}
	tbody > tr:nth-child(5) > td:nth-child(1) {
		color: rgb(128,128,255);
	}
</style>
</head>
<body>
	<table border="1" cellpadding="7" cellspacing="0">
		<thead>
			<tr>
				<th>문법</th>
				<th>이름</th>
				<th>내용</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<th>&lt;%@ %</th>
				<th>지시자(directive)</th>
				<th>3가지종류: 페이지 전반에 적용되는 설정, 다른 JSP파일 포함, 다른 라이브러리 불러오기</th>
			</tr>
			<tr>
				<th>&lt;%! %></th>
				<th>선언부(declaration)</th>
				<th>필드를 선언하거나, 메서드를 정의하는 영역</th>
			</tr>
			<tr>
				<th>&lt;% %></th>
				<th>스크립틀릿(scriptlet)</th>
				<th>메인에 해당하는 자바코드를 작성하는 함수영역, sevice()</th>
			</tr>
			<tr>
				<th>&lt;%= %></th>
				<th>표현식(expression)</th>
				<th>스크립틀릿의 out.print()를 이용해 HTML문서에 자바 값을 출력하는 구문</th>
			</tr>
			<tr>
				<th>&lt;%-- %></th>
				<th>JSP 주석</th>
				<th>HTML의 주석과 같은 용도, 브라우저에서 확인 할 수 없다</th>
			</tr>
		</tbody>
	</table>
	<!--  HTML 주석, 브라우저에서 확인가능 -->
	<%-- JSP 주석, 브라우저에서 확인 불가 --%>
</body>
</html>
=============================================================
<%@ page import="java.util.Random"%>
<%@ page import="java.util.Arrays"%>
<%@ page import="java.util.ArrayList"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%!	// declaration, 선언부, JSP가 클래스로 변환될때 멤버 필드와 멤버 메서드를 선언 및 정의하는 부분
	// 클래스 같은 개념
	
	private String[] arr = {"김주현", "신은욱", "김재령", "홍서현"};
	private ArrayList<String> al = new ArrayList<String>(Arrays.asList(arr)); //일단배열인 arr을 ArrayList로 변환
	
	// 멤버필드이므로, 접근 제한자 적용 가능
	
	public String getRandomName() {
		Random ran = new Random();
		int index = ran.nextInt(al.size());
		return al.get(index);
	}
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex02 - jsp 기본문법 활용</title>
</head>
<body>

<h1>JSP 기본 문법 활용</h1>
<hr>
<%
	// scriptlet, 메인함수에 코드를 작성한다는 느낌으로 사용
	String name = getRandomName();
	
	System.out.println("문서에 반영할 이름 : " + name);	// 콘솔창에 출력
	out.println(name + "님 당첨 !!");
%>
<h2>당첨자 : <%=name %></h2>

</body>
</html>
============================================================================
Arrays.asList()는 Arrays의 private 정적 클래스인 ArrayList를 리턴한다.
java.util.ArrayList 클래스와는 다른 클래스이다.

java.util.Arrays.ArrayList 클래스는 set(), get(), contains() 메서드를 가지고 있지만
원소를 추가하는 메서드는 가지고 있지 않기 때문에 사이즈를 바꿀 수 없다.

package Test;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
 
 
public class TestArrayAsList {
   public static void main(String[] args) {
      String[] strs = {"alpha", "beta", "charlie"};
      System.out.println(Arrays.toString(strs));   // [alpha, beta, charlie]
 
      List<String> lst = Arrays.asList(strs); // new ArrayList<String>(); 대신에 사용
      System.out.println(lst);  // [alpha, beta, charlie]
 
      lst.add("ttt");     // error : asList()로 List를 생성하면 원소를 새롭게 추가할 수 없음
 
      // Changes in array or list write thru
      strs[0] += "88";
      lst.set(2, lst.get(2) + "99"); // 2번째 인덱스 원소에 charlie99 넣음
      System.out.println(Arrays.toString(strs)); // [alpha88, beta, charlie99]
      System.out.println(lst);  // [alpha88, beta, charlie99]
 
      // Initialize a list using an array
      List<Integer> lstInt = Arrays.asList(22, 44, 11, 33);
      System.out.println(lstInt);  // [22, 44, 11, 33]
   }
}
============================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex03 - JSP 내장 객체</title>
</head>
<body>
	<h1>JSP 내장 객체</h1>
	<hr>
	<table border="1" cellpadding="7" cellspacing="0">
	<thead>
		<tr>
			<th>분류</th>
			<th>내장객체</th>
		</tr>
		<h3>내장객체: 생성자를 통해서 생성하지않아도, JSP페이지가 기본적으로 참조할 수 있는 객체</h3>
	</thead>
	<tbody>
		<tr>
			<td>입출력 관련 객체</td>
			<td>
				<p>request</p>
				<p>response</p>
				<p>out</p>
			</td>
		</tr>
		<tr>
			<td>서블릿 관련 객체</td>
			<td>
				<p>page</p>
				<p>config</p>
			</td>
		</tr>
		<tr>
			<td>외부환경 정보를 제공하는 객체</td>
			<td>
				<p>session(로그아웃, 페이지끄기전까지 정보유지)</p>
				<p>application(서버가 종료되기전까지 정보유지)</p>
				<p>pageContext</p>
			</td>
		</tr>
		<tr>
			<td>예외 관련 객체</td>
			<td>exception</td>
		</tr>
	</tbody>
	</table>
</body>
</html>
=================================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex04 - request</title>
</head>
<body>

	<h1>request 내장 객체</h1>
	<hr>
	
	<%
		String name = request.getParameter("name");	// 파라미터의 이름을 문자열로 전달하면, 값을 문자열로 반환
		// value = map.get(key)
		
		// request : 클라이언트가 웹 서버에게 전달하는 요청을 객체화 한 형태
		
		// 보내는 사람	: 클라이언트(IP)
		// 받는 사람	: 서버(IP)
		// 요청 형식	: 내가 문서를 받고싶다면 GET, 내가 어떤 내용을 담아서 보낸다면 POST
		// 요청 내용	: 받고싶은 문서의 이름이나, 클라이언트가 보내는 내용을 받기 원하는 서버의 페이지 이름 (자원의 위치)
		// URL		: Uniform Resource Locator (웹 브라우저의 주소창을 통해서 전달)
	%>
		<h4>보내는 사람 : <%=request.getRemoteAddr() %></h4>
		<h4>받는 사람 : <%=request.getLocalAddr() %></h4>
		<h4>요청 형식 : <%=request.getMethod() %></h4>
		<h4>요청 내용 : <%=request.getRequestURL() %></h4>
		<h4>자원 식별자 (서버 내에서 자원을 식별할 수 있는 유일한 이름) : <%=request.getRequestURI() %></h4>
	<%
		// http://search.naver.com/search.naver?query=이지은
		
		// http://				프로토콜, 서버와 클라이언트가 통신하는 규칙과 약속
		// search.naver.com		서버 도메인(IP), 어떤 서버에게 요청을 전달하는가 (받는 사람)
		// search.naver			문서, 페이지의 이름 (자원의 이름)
		// ?query=이지은			파라미터, ?변수이름1=변수값1&변수이름2=변수값...
		//						클라이언트가 서버에게 전달하고자 하는 값 (내가 원하는 문서를 특정하기 위해서)
		
		// http://도서관.com/대여.html?책이름=드래곤볼&책번호=3
		// 도서관에 가서 대여 창구에서 "책 이름은 드래곤볼이구요, 번호는 3권입니다. 이 책을 저에게 주세요(GET)"
		
		// request의 방향은 항상 클라이언트 -> 서버
	%>
	
	<h3>name : <%=name %></h3>

</body>
</html>
==============================================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex05 - 파라미터 활용 예시</title>
</head>
<body>

	<h1>파라미터 활용 예시</h1>
	<hr>
	
	<%--일반적인 웹 환경에서, 사용자가 주소창에 직접 파라미터를 작성하는 경우는 거의 없다 --%>
	<%--현재 페이지에서는 입력만 받고, 입력받은 파라미터를 다른 페이지에 전달해서 처리하도록 설정 --%>
	
	<form action="ex05-result.jsp">
		<input type="number" name="num" placeholder="번호" min="1" max="5" autofocus>
		<input type="submit">
	</form>
	
</body>
</html>
----------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.ArrayList, java.util.Arrays, java.util.Collections"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex05-result</title>
</head>
<body>

	<h1>전달받은 파라미터를 활용하여 출력 내용을 결정</h1>
	<hr>
	<%
		String num = request.getParameter("num");
		int idx = 0;
		if(num != null) {	// 파라미터를 입력하지 않았을 수도 있다
			idx = Integer.parseInt(num);	
		}
		
		String[] arr = {"짱구", "훈이", "유리", "철수", "맹구"}; 
		ArrayList<String> list = new ArrayList<String>(Arrays.asList(arr));
		Collections.sort(list);
		
		String value = (idx > 0) ? list.get(idx - 1) : "...";
	%>
	
	<h2><%=idx %>번째 멤버의 이름은 <%=value %>입니다</h2>
	<a href="ex05.jsp">입력페이지로 돌아가기</a>

</body>
</html>
===========================================================================================
#)핵심은 자바코드가 먼저실행된다

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex06 - 파라미터를 HTML 태그 요소 및 속성으로 반영하기</title>
	<%
		String fontColor = "#000000";
		String bgColor = "#ffffff";
	
		fontColor = request.getParameter("fontColor");
		bgColor = request.getParameter("bgColor");
		
		if(fontColor == null) 	fontColor = "#000000";
		if(bgColor == null) 	bgColor = "#ffffff";
	%>
<style>
	body {
		color: <%=fontColor%>;
		background-color: <%=bgColor%>;
	}
</style>
</head>
<body>
	<h1>파라미터를 HTML 태그 요소 및 속성으로 반영하기</h1>
	<hr>
	#)기본값으로 들어가있다. input에 #000000과 #ffffff
	<form>	<%-- action 속성이 없으면 현재 페이지가 요청을 받아서 처리한다 --%>
		<p>글자색 : <input type="color" name="fontColor" value="<%=fontColor%>"></p>
		<p>배경색 : <input type="color" name="bgColor" value="<%=bgColor%>"></p>
		<input type="submit" value="적용">
	</form>

</body>
</html>
======================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>quiz01.jsp</title>
</head>
<body>
	<%-- 
		사용자의 이름과 나이를 입력받을 수 있는 form 태그를 작성하고,
		quiz01-result.jsp 로 파라미터를 넘겨줄 수 있도록 설정하세요
		
	 --%>
	 <!-- 사용자가 입력한 데이터를 묶어서 action을 취할 페이지에 넘겨준다 -->
	 <form action="quiz01-result.jsp">
	 	<input type="text" name="name" placeholder="이름" autofocus>
	 	<input type="number" name="age" min="1" max="150" placeholder="나이">
	 	<input type="submit" value="입력">
	 </form>

</body>
</html>
----------
<%@page import="java.util.Enumeration"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>quiz01-result.jsp</title>
</head>
<body>

	<%--
		전달받은 이름과 나이를 변수에 저장하고, 20세 이상이면 성인, 아니면 미성년자로 지정해서
		한줄에 <h2>태그로 이름과 나이, 성인 여부를 출력하세요
	 --%>
	 <%	
	 	String name, adult, msg = "";
	 	int age;
	 	try {
		 	name = request.getParameter("name");
		 	age = Integer.parseInt(request.getParameter("age"));
		 	
		 	adult = age >= 20 ? "성인" : "미성년자";
		 	msg = String.format("%s님은 %d살이고, %s입니다", name, age, adult);
		 	
	 	} catch(Exception e) {
	 		// out.print("<h3 style=\"color: red\";>입력이 잘못되었습니다</h3>");
	 		response.sendRedirect("quiz01.jsp");	// 지정한 주소로 새로운 요청을 시도하세요(to Client)
	 		System.out.println("예외 : " + e);
	 	}
	 %>
	 <h2><%=msg %></h2>
	 
	 <hr>
	 
	 <%
	 	// 다수의 파라미터를 한번에 처리하고 싶다면
	 	Enumeration<String> names = request.getParameterNames();// 파라미터의 이름만 묶어서 불러와서
	 	while(names.hasMoreElements()) {
	 		String key = names.nextElement();
	 		String value = request.getParameter(key);
	 		out.print(key + " : " + value + "<br>\n");
	 		
	 		switch(key) {	// 문자열을 .equals() 로 비교하기 싫으면 switch 도 사용 가능
	 		case "age":
	 			String adult2 = Integer.parseInt(value) >= 20 ? "성인" : "미성년자";
	 			out.print("adult : " + adult2);
	 			break;
	 		}
	 	}
	 %>

</body>
</html>
==============================================================================
public class DTO {
	//private 멤버 필드를
	//public getter/setter
	//작성하지 않는 경우 기본 생성자
}
<jsp:useBean />
<jsp:setProperty />

-<input> 태그의 name 속성을 기준으로 파라미터와 gette/setter를 매핑한다
-request.getParameter()는 String이지만,
  <jsp:setProperty />는 primitive에 대한 파싱도 자동 지원한다
-다수의 파라미터를 캡슐화해서 하나의 객체로 취급하기 때문에, 다른 페이지나 DB에 전달하기 용이하다
=============
<form action="파라미터를 전달받을 주소" method="파라미터를 전달하는 방식">
- GET: 폼을 제출하면 파라미터를 포함하여 GET방식의 새로운 요청을 만들어낸다
  (파라미터를 쿼리스트링형태로 전달, 주소창을 통해서 전달)
- POST: 폼을 제출하면 파라미터는 별도의 헤더를 통해서 전달
  (request 헤더의 form-data 영역으로 전달)
  (주소창을 통해서 전달하는 방식이 아니므로, 글자를 전달하는 규칙(인코딩)이달라질수있다)
  <% request.setCharacterEncoding("UTF-8"); %>
  request.getParameter()를 호출하기 전에 위 코드가 있어야 한다.
=============
request.getMethod()
요청방식에 따른 분류

GET VS POST

GET
- 주소창을 통해서 파라미터를 전달한다
- POST에 비해서 빠르다
- 글자로 표현가능한 데이터만 전달할 수 있다(파일전송불가)
- 글자수 제한이 있는 경우도 있다(최근 환경에서는 사실상 길이 제한은 거의 없음)
- 용량 제한은 어느정도 있다
- 자바스크립트를 통한 주소변경(location.href='주소'), <a>통한 주소변경은 모두 GET방식의 요청이다

POST
- 요청헤더의 form-data영역에 파라미터를 담아서 전송 (주소창을 통하지 않는다)
- 비밀번호와 같이 보안상 민감한 데이터를 다룰때에는 글자로 구성된 데이터라고 해도, POST를 사용한다
- 단, 주소창에 노출이 되지않을 뿐, 패킷을 열어보면 패스워드도 식별가능하다
- 파일전송가능(추가적인 속성을 작성해야한다)

#)파라미터는 문자열만 된다(클라이언트가 쓴 정보에 한해서). 그래서, 내가 만든 어브리뷰트를 쓸수있다. 모든 자료형을 쓸수있다.
===================================================================
package day02;

public class Ex01DTO { //기본생성자도 같이있다
	private String name;
	private String age;
	private String address;
	private String birth;
	private String gender;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAge() {
		return age;
	}
	public void setAge(String age) {
		this.age = age;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public String getBirth() {
		return birth;
	}
	public void setBirth(String birth) {
		this.birth = birth;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
}
---------------
<%@page import="day02.Ex01DTO"%>
<%@page import="java.util.Enumeration"%>
<%@page import="java.util.Set"%>
<%@ page import="java.util.Map"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex01 - 다수의 파라미터 처리하기</title>
</head>
<body>

	<h1>다수의 파라미터 처리하기</h1>
	<hr>
	
	<form>
		<p><input type="text" name="name" placeholder="이름"></p>
		<p><input type="text" name="age" placeholder="나이"></p>
		<p><input type="text" name="address" placeholder="주소"></p>
		<p><input type="number" name="birth" placeholder="생년월일" min="10000" max="999999" ></p>
		<p>
			<select name="gender">
				<option value="">===성별===</option>
				<option value="남성">남성</option>
				<option value="여성">여성</option>
				<option value="none">선택안함</option>
			</select>
		</p>
		<input type="submit">
	</form>
	
	<fieldset>
		<legend>request.getParameterMap()</legend>
	<%
		// test.jsp?name=이지은&name=홍진호&name=나단비
		// String[] param = {"이지은", "홍진호", "나단비"};
	
		// 다수의 파라미터를 컬렉션 중 Map의 형태로 묶어서 가져올 수 있다 
		Map<String, String[]> map = request.getParameterMap();
		
		// map 에서 key만 묶어서 Set 형태로 가져온다
		Set<String> keySet = map.keySet();
		
		for(String key : keySet) {
			String value = map.get(key)[0];	// 자료형만 배열일 뿐, 값은 하나밖에 없어서 arr[0] 로 받으면 된다
			out.println(key + " : " + value + "<br>");
		}
	%>
	</fieldset>
	
	<fieldset>
		<legend>request.getParameterNames()</legend>
	<%
		Enumeration<String> enu = request.getParameterNames();
		
		while(enu.hasMoreElements()) {			// 아직 처리하지 않은 다음 요소가 존재한다면 (true/false)
			String name = enu.nextElement();	// 그 요소를 하나 가져와서 (파라미터 이름)
			String param = request.getParameter(name); 	// 파라미터 값을 불러오고
			out.println(name + " : " + param + "<br>");	// 이름과 값을 각각 출력
		}
	%>
	
	</fieldset>
	
	<fieldset>
		<legend>DTO클래스를 이용하여 직접 입력받기</legend>
	<%
		Ex01DTO dto = new Ex01DTO();
		dto.setAddress(request.getParameter("address"));
		dto.setAge(request.getParameter("age"));
		dto.setBirth(request.getParameter("birth"));
		dto.setGender(request.getParameter("gender"));
		dto.setName(request.getParameter("name"));
	%>
	name : <%=dto.getName() %><br>
	age : <%=dto.getAge() %><br>
	address : <%=dto.getAddress() %><br>
	birth : <%=dto.getBirth() %><br>
	gender : <%=dto.getGender() %><br>
	</fieldset>
	
	<fieldset>
		<legend>jsp:setProperty(액션태그)</legend>
		<%--객체 생성 (기본생성자) --%>
		<jsp:useBean id="dto2" class="day02.Ex01DTO" />
		
		<%--클래스가 가지는 setter와 input의 name이 일치한다면 파라미터를 받아서 객체에 대입 --%>			
		<jsp:setProperty property="*" name="dto2" />	
		
		name : <%=dto2.getName() %><br>
		age : <%=dto2.getAge() %><br>
		address : <%=dto2.getAddress() %><br>
		birth : <%=dto2.getBirth() %><br>
		gender : <jsp:getProperty name="dto2" property="gender" /><br>
		<%--문법이 있지만 출력시에는 getProperty를 잘 사용하지 않는다 --%>
	</fieldset>

</body>
</html>
====================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex02 - 하나의 파라미터가 여러 값을 가지는 경우</title>
</head>
<body>
	<h1>하나의 파라미터가 여러 값을 가지는 경우</h1>
	<hr>
	
	<fieldset>
		<!-- part라는 변수에 여러 값이 들어간다 , 근데 주소창에는 값이 여러개 들어갔지만 출력하면 값하나만 나온다-->
		<legend>설문</legend>
		<p>다음 중, 관심있는 분야를 선택하세여(중복선택가능)</p>
	<form>
		<label><input type="checkbox" name="part" value="네트워크">네트워크</label>
		<label><input type="checkbox" name="part" value="시스템">시스템</label>
		<label><input type="checkbox" name="part" value="웹(프론트)">웹(프론트)</label>
		<label><input type="checkbox" name="part" value="웹(백엔드)">웹(백엔드)</label>
		<label><input type="checkbox" name="part" value="앱개발">앱개발</label>
		<p><input type="submit"></p>
	</form>
	</fieldset>
	
	<%  // null. 은 (x) -> part.length 은 파라미터가 아애 없으면 널포인터 에러뜬다
		System.out.println(request.getParameter("part")); //이줄은 하나만 출력, 처음실행하면 아무것도 선택안해서 null출력
		//값이 하나만 출력되는 걸 방지하기 위해
		//변수이름은 하나이지만, 값이 여러개인 경우  String[] 의 형태로 값을 받을 수 있다.
		String[] part = request.getParameterValues("part");
		
		out.println("희망분야: ");
		for(String param : part) {
			out.print(param + " ");
		}
		//또는
		//for(int i = 0; part != null && i< part.length; i++) {
		//	out.print(part[i]);
		//	out.print( i == part.length -1 ? "<br>" : ", "); //마지막 요소이면 줄바꿈
		out.println("<br>");
	%>
</body>
</html>
=====================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex03 - form 입력과 출력을 하나의 페이지에서</title>
</head>
<body>
	//위에서부터 순차적으로실행
	<h1>form 입력과 (처리와 출력)을 하나의 페이지에서</h1>
	<hr>
	<%
		String name = null;
		switch(request.getMethod()) {	// 하나의 페이지가 method에 따라서 수행하는 내용을 달리 할 수 있다
		case "GET":
	%>
	<h4>여기는 GET</h4>
	<form action="" method="POST">
		<input name="name" placeholder="이름을 입력하세요" autofocus>
		<%--form 내부의 input이 하나인 경우 엔터키가 submit역할을 수행한다 --%>
	</form>
	<%
			break;
			
		case "POST":
	%>
	<h4>여기는 POST</h4>
	<%
			request.setCharacterEncoding("UTF-8");
			name = request.getParameter("name");
	%>
	<h3><%=name %>님, 안녕하세요 !!</h3>
	<button onclick="location.href='ex03.jsp'">다시 GET으로</button> <!-- GET방식으로 다시요청 -->
	<%
			break;
		}
	%>
</body>
</html>
=====================================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex04</title>
</head>
<body>

	<h1>redirect와 forward</h1>
	<hr>
	<ul>
		<li>
			<b>redirect : 서버가 클라이언트에게 새로운 주소를 알려주고, 클라이언트가 전달받은 주소로 새로운 요청을 시도</b>
			<ol>
				<li>서버 내 페이지는 물론, 서버 외부의 다른 주소도 요청 가능</li>
				<li>클라이언트가 새로운 요청을 시도하므로, 주소창이 변경됨</li>
			</ol>
		</li>
		<br>
		<li>
			forward : 서버가 가지고 있는 다른 문서로 응답을 바꿔치기함
			<ol>
				<li>요청을 분석하여 다른 응답이 필요한 경우, 서버가 가진 문서중 하나로 응답을 변경</li>
				<li>클라이언트가 A를 요청한 경우, 서버가 임의로 B를 응답으로 보내주기 때문에 주소창은 A가 떠있음</li>
				<li>페이지를 변경해도 request가 유지되므로, 파라미터를 다른페이지에서도 참조할 수 있다</li>
			</ol>
		</li>
	</ul>
	
	<fieldset>
		<legend><b>redirect	</b></legend>
		<form method="POST">
			<input name="redirectURL" placeholder="이동할 주소를 입력" size="50">
			<input type="submit">
		</form>
	</fieldset>
	
	<fieldset>
		<legend><b>forward</b></legend>
		<form method="POST">
			<input name="forwardURI" placeholder="이동할 주소를 입력" size="50">
			<input type="submit">
		</form>
	</fieldset>
	
	<%
		String redirectURL = request.getParameter("redirectURL");
		String forwardURI = request.getParameter("forwardURI");
		
		if(redirectURL != null) {
			response.sendRedirect(redirectURL); //입력한 값으로 주소창이 바뀐다. as입력시 ->http://localhost:8080/day02/as 출력
		}
		if(forwardURI != null) {
			request.setCharacterEncoding("UTF-8");
			
			// 이동하고 싶은 주소를 전달하면서 요청을 지속적으로 따라갈 수 있는 객체를 받는다
			RequestDispatcher rd = request.getRequestDispatcher(forwardURI);
			
			// 여기서 요청받은 request를 이동한 페이지에서도 그대로 사용할 수 있도록 request를 같이 전달한다
			rd.forward(request, response); //주소창은 그대로
		}
	%>

</body>
</html>
=============================================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex05-input</title>
</head>
<body>

	<h1>ex05 - 입력만 하는 페이지</h1>
	<hr>
	<!-- POST방식은 주소창에 파라미터가 안보인다 -->
	<form method="POST" action="ex05-process.jsp">
		<input name="name" placeholder="이름">
		<input name="age" placeholder="나이">
		<input type="submit">
	</form>

</body>
</html>
---------------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%
	// ex05 - 처리만 하는 페이지
	
	request.setCharacterEncoding("UTF-8");

	String name = request.getParameter("name");
	String age = request.getParameter("age");
	// parameter는 setter 가 없다
	
	int num = Integer.parseInt(age);
	
	if(num >= 20) {	// 조건이 참이면 forward
		String message = String.format("%s님은 %s살이므로 입장가능합니다~", name, age);
		request.setAttribute("message", message); //forward하면 request를 받을수있다. 그대로
		
		request.getRequestDispatcher("ex05-output.jsp").forward(request, response); //output.jsp로 응답을 해주는데 주소창은 안바뀐다,(process.jsp그대로)
		//response.sendRedirect("ex05-output.jsp");
	}
	else {			// 조건이 거짓이면 redirect
		response.sendRedirect("ex05-input.jsp");
	}
%>
---------------------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ex05-output.jsp</title>
</head>
<body>
	
	<h1>ex05 - 출력만 하는 페이지</h1>
	<hr>
<%-- 	<%=request.getParameter("name") %> 님은 --%>
<%-- 	<%=request.getParameter("age") %>살이므로, 입장 가능합니다 --%>
	<%=request.getAttribute("message") %>
	
</body>
</html>
==============================================================
